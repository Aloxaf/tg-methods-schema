//! This file is written in [RON] (Rusty Object Notation).
//! 
//! This "schema" is a formalized version of the 
//! [telegram bot api documentation][tbadoc] which is not machine readable.
//! (note: this schema currently covers only API methods and **not** types).
//! 
//! Also, note that this file is **hand written** and may contain typos,
//! deviations from original doc, and other kinds of typical human errors.
//! If you found an error please open an issue (or make a PR) on [github].
//! 
//! This schema is targeting code generation for API wrappers in a statically 
//! typed language, though you may use it whatever you want.
//!
//! This scheme also has some intentional differences from original doc:
//! * New types:
//!   + `ChatId` - type of `chat_id` parameter, in the original documentation
//!     written as `Integer or String
//!   + `ChatAction` - type of `action` param in `sendChatAction` method
//!   + `AllowedUpdate` inner type of `allowed_updates` in `getUpdates` and
//!     `setWebhook` (so type is `ArrayOf(AllowedUpdate)`)
//!   + `ReplyMarkup` - type of `reply_markup` parameter, in the original
//!     documentation written as `InlineKeyboardMarkup or ReplyKeyboardMarkup or 
//!     ReplyKeyboardRemove or ForceReply`
//!   + `ParseMode` type of `parse_mode` params
//! * Integers represented with more strict (when possible) types, e.g.:
//!   `u8` (unsigned, 8-bit integer), `u32` (unsigned, 32-bit), 
//!   `i64` (signed, 64-bit), etc
//! * Instead of optional parameters `Option(Ty)` is used
//! * Instead of `InputFile or String` just `InputFile` is used (assuming that
//!   `InputFile` is a sum-type or something and it can contain `String`s)
//! * `f64` ~= `Float number`
//! 
//! [tbadoc]: https://core.telegram.org/bots/api
//! [RON]: https://github.com/ron-rs/ron
//! [github]: https://github.com/WaffleLapkin/tg-methods-schema

Schema(
    api_version: ApiVersion(ver: "4.9", date: "June 4, 2020"),
    methods: [
        Method(
            names: ("getUpdates", "GetUpdates", "get_updates"),
            return_ty: ArrayOf(RawTy("Update")),
            doc: Doc(
                md: "Use this method to receive incoming updates using long polling ([wiki]). An Array of [Update] objects is returned.",
                md_links: {
                    "wiki": "https://en.wikipedia.org/wiki/Push_technology#Long_polling",
                    "Update": "https://core.telegram.org/bots/api#update",
                },    
            ),
            tg_doc: "https://core.telegram.org/bots/api#getupdates",
            tg_category: "Getting updates",
            params: [
                Param(
                    name: "offset",
                    ty: Option(i64),
                    descr: Doc(
                        md: "Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates] is called with an offset higher than its update_id. The negative offset can be specified to retrieve updates starting from -offset update from the end of the updates queue. All previous updates will forgotten.",
                        md_links: {
                            "getUpdates": "https://core.telegram.org/bots/api#getupdates",
                        }
                    )
                ),
                Param(
                    name: "limit",
                    ty: Option(u8),
                    descr: Doc(md: "Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100."),
                ),
                Param(
                    name: "timeout",
                    ty: Option(u32),
                    descr: Doc(md: "Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only."),
                ),
                Param(
                    name: "allowed_updates",
                    ty: ArrayOf(RawTy("AllowedUpdate")),
                    descr: Doc(
                        md: "A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited_channel_post”, “callback_query”] to only receive updates of these types. See [Update] for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.\n\nPlease note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.",
                        md_links: {"update":"https://core.telegram.org/bots/api#update"},
                    ),
                )
            ],
            notes: [
                (md: "This method will not work if an outgoing webhook is set up."),
                (md: "In order to avoid getting duplicate updates, recalculate _offset_ after each server response.")
            ],
        ),
        Method(
            names: ("setWebhook", "SetWebhook", "set_webhook"),
            return_ty: True,
            doc: Doc(
                md: "Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized [Update]. In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns True on success.\n\nIf you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. `https://www.example.com/<token>`. Since nobody else knows your bot's token, you can be pretty sure it's us.",
                md_links: {"Update":"https://core.telegram.org/bots/api#update"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#setwebhook",
            tg_category: "Getting updates",
            params: [
                Param(
                    name: "url",
                    ty: String,
                    descr: Doc(md: "HTTPS url to send updates to. Use an empty string to remove webhook integration"),
                ),
                Param(
                    name: "certificate",
                    ty: Option(RawTy("InputFile")),
                    descr: Doc(
                        md: "Upload your public key certificate so that the root certificate in use can be checked. See our [self-signed guide] for details.",
                        md_links: {"self-signed guide":"https://core.telegram.org/bots/self-signed"},
                    )
                ),
                Param(
                    name: "max_connections",
                    ty: Option(u8),
                    descr: Doc(md: "Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to 40. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput.")
                ),    
                   Param(
                    name: "allowed_updates",
                    ty: ArrayOf(RawTy("AllowedUpdate")),
                    descr: Doc(
                        md: "A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited_channel_post”, “callback_query”] to only receive updates of these types. See [Update] for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.\n\nPlease note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.",
                        md_links: {"update":"https://core.telegram.org/bots/api#update"},
                    ),
                )
            ],
            notes: [
                (
                    md: "You will not be able to receive updates using [getUpdates] for as long as an outgoing webhook is set up.",
                    md_links: {"getUpdates": "https://core.telegram.org/bots/api#getupdates"},
                ),
                (
                    md: "To use a self-signed certificate, you need to upload your [public key certificate] using certificate parameter. Please upload as InputFile, sending a String will not work.",
                    md_links: {"public key certificate":"https://core.telegram.org/bots/self-signed"}
                ),
                (md: "Ports currently supported for Webhooks: **443**, **80**, **88**, **8443**."),
            ]
        ),        
        Method(
            names: ("deleteWebhook", "DeleteWebhook", "delete_webhook"),
            return_ty: True,
            doc: Doc(
                md: "Use this method to remove webhook integration if you decide to switch back to [getUpdates]. Returns True on success. Requires no parameters.",
                md_links: {"getUpdates":"https://core.telegram.org/bots/api#getupdates"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#deletewebhook",
            tg_category: "Getting updates",
            params: [],
        ),
        Method(
            names: ("getWebhookInfo", "GetWebhookInfo", "get_webhook_info"),
            return_ty: RawTy("WebhookInfo"),
            doc: Doc(
                md: "Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo] object. If the bot is using [getUpdates], will return an object with the _url_ field empty.",
                md_links: {
                    "WebhookInfo": "https://core.telegram.org/bots/api#webhookinfo",
                    "getUpdates": "https://core.telegram.org/bots/api#getupdates",
                }
            ),
            tg_doc: "https://core.telegram.org/bots/api#getwebhookinfo",
            tg_category: "Getting updates",
            params: [],
        ),
        Method(
            names: ("getMe", "GetMe", "get_me"),
            return_ty: RawTy("User"),
            doc: Doc(
                md: "A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a [User] object.",
                md_links: {"User": "https://core.telegram.org/bots/api#user"}
            ),
            tg_doc: "https://core.telegram.org/bots/api#getme",
            tg_category: "Available methods",
            params: [],
        ),
        Method(
            names: ("sendMessage", "SendMessage", "send_message"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to send text messages. On success, the sent [Message] is returned.",
                md_links: {"Message": "https://core.telegram.org/bots/api#message"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#sendmessage",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "text",
                    ty: String,
                    descr: Doc(md: "Text of the message to be sent, 1-4096 characters after entities parsing")
                ),
                Param(
                    name: "parse_mode",
                    ty: Option(RawTy("ParseMode")),
                    descr: Doc(
                        md: "Mode for parsing entities in the message text. See [formatting options] for more details.",
                        md_links: {"formatting options": "https://core.telegram.org/bots/api#formatting-options"}
                    )
                ),
                Param(
                    name: "disable_web_page_preview",
                    ty: Option(bool),
                    descr: Doc(md: "Disables link previews for links in this message")
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"}
                    )
                ),
                Param(
                    name: "reply_to_message_id",
                    ty: Option(i64),
                    descr: Doc(md: "If the message is a reply, ID of the original message")
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
        ),
        Method(
            names: ("forwardMessage", "ForwardMessage", "forward_message"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to forward messages of any kind. On success, the sent [Message] is returned.",
                md_links: {"Message": "https://core.telegram.org/bots/api#message"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#forwardmessage",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"),
                ),
                Param(
                    name: "from_chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)"),
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"}
                    )
                ),
                Param(
                    name: "message_id",
                    ty: i64, 
                    descr: Doc(md: "Message identifier in the chat specified in _from\\_chat\\_id_")
                ),
            ],
        ),
        Method(
            names: ("sendPhoto", "SendPhoto", "send_photo"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to send photos. On success, the sent [Message] is returned.",
                md_links: {"Message": "https://core.telegram.org/bots/api#message"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#sendphoto",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "photo",
                    ty: RawTy("InputFile"),
                    descr: Doc(
                        md: "Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. [More info on Sending Files »]",
                        md_links: {"More info on Sending Files »": "https://core.telegram.org/bots/api#sending-files"},
                    )
                ),
                Param(
                    name: "caption",
                    ty: String,
                    descr: Doc(md: "Photo caption (may also be used when resending photos by _file\\_id_), 0-1024 characters after entities parsing")
                ),
                Param(
                    name: "parse_mode",
                    ty: Option(RawTy("ParseMode")),
                    descr: Doc(
                        md: "Mode for parsing entities in the photo caption. See [formatting options] for more details.",
                        md_links: {"formatting options": "https://core.telegram.org/bots/api#formatting-options"}
                    )
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"}
                    )
                ),
                Param(
                    name: "reply_to_message_id",
                    ty: Option(i64),
                    descr: Doc(md: "If the message is a reply, ID of the original message")
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
        ),
        Method(
            names: ("sendAudio", "SendAudio", "send_audio"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message] is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.\n\nFor sending voice messages, use the [sendVoice] method instead.",
                md_links: {
                    "Message": "https://core.telegram.org/bots/api#message",
                    "sendVoice": "https://core.telegram.org/bots/api#sendvoice",
                },
            ),
            tg_doc: "https://core.telegram.org/bots/api#sendaudio",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"),
                ),
                Param(
                    name: "audio",
                    ty: RawTy("InputFile"),
                    descr: Doc(
                        md: "Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »]",
                        md_links: {"More info on Sending Files »": "https://core.telegram.org/bots/api#sending-files"},
                    ),
                ),
                Param(
                    name: "caption",
                    ty: String,
                    descr: Doc(md: "Audio caption, 0-1024 characters after entities parsing"),
                ),
                Param(
                    name: "parse_mode",
                    ty: Option(RawTy("ParseMode")),
                    descr: Doc(
                        md: "Mode for parsing entities in the audio caption. See [formatting options] for more details.",
                        md_links: {"formatting options": "https://core.telegram.org/bots/api#formatting-options"},
                    ),
                ),
                Param(
                    name: "duration",
                    ty: Option(u32),
                    descr: Doc(md: "Duration of the audio in seconds"),
                ),
                Param(
                    name: "performer",
                    ty: Option(String),
                    descr: Doc(md: "Performer"),
                ),
                Param(
                    name: "title",
                    ty: Option(String),
                    descr: Doc(md: "Track name"),
                ),
                Param(
                    name: "thumb",
                    ty: Option(RawTy("InputFile")),
                    descr: Doc(
                        md: "Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. [More info on Sending Files »]",
                        md_links: {"More info on Sending Files »": "https://core.telegram.org/bots/api#sending-files"},
                    ),
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"},
                    )
                ),
                Param(
                    name: "reply_to_message_id",
                    ty: Option(i64),
                    descr: Doc(md: "If the message is a reply, ID of the original message")
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
        ),
    ],
    tg_categoryes: {
        "Getting updates": "https://core.telegram.org/bots/api#getting-updates",
        "Available methods": "https://core.telegram.org/bots/api#available-methods",
    }
)
