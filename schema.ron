//! This file is written in [RON] (Rusty Object Notation).
//! 
//! This "schema" is a formalized version of the 
//! [telegram bot api documentation][tbadoc] which is not machine readable.
//! (note: this schema currently covers only API methods and **not** types).
//! 
//! Also, note that this file is **hand written** and may contain typos,
//! deviations from original doc, and other kinds of typical human errors.
//! If you found an error please open an issue (or make a PR) on [github].
//! 
//! This schema is targeting code generation for API wrappers in a statically 
//! typed language, though you may use it whatever you want.
//!
//! This scheme also has some intentional differences from original doc:
//! * New types:
//!   + `ChatId` - type of `chat_id` parameter, in the original documentation
//!     written as `Integer or String
//!   + `ChatAction` - type of `action` param in `sendChatAction` method
//!   + `AllowedUpdate` inner type of `allowed_updates` in `getUpdates` and
//!     `setWebhook` (so type is `ArrayOf(AllowedUpdate)`)
//!   + `ReplyMarkup` - type of `reply_markup` parameter, in the original
//!     documentation written as `InlineKeyboardMarkup or ReplyKeyboardMarkup or 
//!     ReplyKeyboardRemove or ForceReply`
//!   + `ParseMode` type of `parse_mode` params
//!   + `PollType` type of poll, either ‚Äúquiz‚Äù or ‚Äúregular‚Äù
//!   + `DiceEmoji` emoji that can be used in `sendDice` one of ‚Äúüé≤‚Äù, ‚ÄúüéØ‚Äù, or ‚ÄúüèÄ‚Äù
//! * Integers represented with more strict (when possible) types, e.g.:
//!   `u8` (unsigned, 8-bit integer), `u32` (unsigned, 32-bit), 
//!   `i64` (signed, 64-bit), etc
//! * Instead of optional parameters `Option(Ty)` is used
//! * Instead of `InputFile or String` just `InputFile` is used (assuming that
//!   `InputFile` is a sum-type or something and it can contain `String`s)
//! * `f64` ~= `Float number`
//! 
//! [tbadoc]: https://core.telegram.org/bots/api
//! [RON]: https://github.com/ron-rs/ron
//! [github]: https://github.com/WaffleLapkin/tg-methods-schema

Schema(
    api_version: ApiVersion(ver: "4.9", date: "June 4, 2020"),
    methods: [
        Method(
            names: ("getUpdates", "GetUpdates", "get_updates"),
            return_ty: ArrayOf(RawTy("Update")),
            doc: Doc(
                md: "Use this method to receive incoming updates using long polling ([wiki]). An Array of [Update] objects is returned.",
                md_links: {
                    "wiki": "https://en.wikipedia.org/wiki/Push_technology#Long_polling",
                    "Update": "https://core.telegram.org/bots/api#update",
                },    
            ),
            tg_doc: "https://core.telegram.org/bots/api#getupdates",
            tg_category: "Getting updates",
            params: [
                Param(
                    name: "offset",
                    ty: Option(i64),
                    descr: Doc(
                        md: "Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates] is called with an offset higher than its update_id. The negative offset can be specified to retrieve updates starting from -offset update from the end of the updates queue. All previous updates will forgotten.",
                        md_links: {
                            "getUpdates": "https://core.telegram.org/bots/api#getupdates",
                        }
                    )
                ),
                Param(
                    name: "limit",
                    ty: Option(u8),
                    descr: Doc(md: "Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100."),
                ),
                Param(
                    name: "timeout",
                    ty: Option(u32),
                    descr: Doc(md: "Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only."),
                ),
                Param(
                    name: "allowed_updates",
                    ty: ArrayOf(RawTy("AllowedUpdate")),
                    descr: Doc(
                        md: "A JSON-serialized list of the update types you want your bot to receive. For example, specify [‚Äúmessage‚Äù, ‚Äúedited_channel_post‚Äù, ‚Äúcallback_query‚Äù] to only receive updates of these types. See [Update] for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.\n\nPlease note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.",
                        md_links: {"update":"https://core.telegram.org/bots/api#update"},
                    ),
                )
            ],
            notes: [
                (md: "This method will not work if an outgoing webhook is set up."),
                (md: "In order to avoid getting duplicate updates, recalculate _offset_ after each server response.")
            ],
        ),
        Method(
            names: ("setWebhook", "SetWebhook", "set_webhook"),
            return_ty: True,
            doc: Doc(
                md: "Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized [Update]. In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns True on success.\n\nIf you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. `https://www.example.com/<token>`. Since nobody else knows your bot's token, you can be pretty sure it's us.",
                md_links: {"Update":"https://core.telegram.org/bots/api#update"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#setwebhook",
            tg_category: "Getting updates",
            params: [
                Param(
                    name: "url",
                    ty: String,
                    descr: Doc(md: "HTTPS url to send updates to. Use an empty string to remove webhook integration"),
                ),
                Param(
                    name: "certificate",
                    ty: Option(RawTy("InputFile")),
                    descr: Doc(
                        md: "Upload your public key certificate so that the root certificate in use can be checked. See our [self-signed guide] for details.",
                        md_links: {"self-signed guide":"https://core.telegram.org/bots/self-signed"},
                    )
                ),
                Param(
                    name: "max_connections",
                    ty: Option(u8),
                    descr: Doc(md: "Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to 40. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput.")
                ),    
                   Param(
                    name: "allowed_updates",
                    ty: ArrayOf(RawTy("AllowedUpdate")),
                    descr: Doc(
                        md: "A JSON-serialized list of the update types you want your bot to receive. For example, specify [‚Äúmessage‚Äù, ‚Äúedited_channel_post‚Äù, ‚Äúcallback_query‚Äù] to only receive updates of these types. See [Update] for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.\n\nPlease note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.",
                        md_links: {"update":"https://core.telegram.org/bots/api#update"},
                    ),
                )
            ],
            notes: [
                (
                    md: "You will not be able to receive updates using [getUpdates] for as long as an outgoing webhook is set up.",
                    md_links: {"getUpdates": "https://core.telegram.org/bots/api#getupdates"},
                ),
                (
                    md: "To use a self-signed certificate, you need to upload your [public key certificate] using certificate parameter. Please upload as InputFile, sending a String will not work.",
                    md_links: {"public key certificate":"https://core.telegram.org/bots/self-signed"}
                ),
                (md: "Ports currently supported for Webhooks: **443**, **80**, **88**, **8443**."),
            ]
        ),        
        Method(
            names: ("deleteWebhook", "DeleteWebhook", "delete_webhook"),
            return_ty: True,
            doc: Doc(
                md: "Use this method to remove webhook integration if you decide to switch back to [getUpdates]. Returns True on success. Requires no parameters.",
                md_links: {"getUpdates":"https://core.telegram.org/bots/api#getupdates"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#deletewebhook",
            tg_category: "Getting updates",
            params: [],
        ),
        Method(
            names: ("getWebhookInfo", "GetWebhookInfo", "get_webhook_info"),
            return_ty: RawTy("WebhookInfo"),
            doc: Doc(
                md: "Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo] object. If the bot is using [getUpdates], will return an object with the _url_ field empty.",
                md_links: {
                    "WebhookInfo": "https://core.telegram.org/bots/api#webhookinfo",
                    "getUpdates": "https://core.telegram.org/bots/api#getupdates",
                }
            ),
            tg_doc: "https://core.telegram.org/bots/api#getwebhookinfo",
            tg_category: "Getting updates",
            params: [],
        ),
        Method(
            names: ("getMe", "GetMe", "get_me"),
            return_ty: RawTy("User"),
            doc: Doc(
                md: "A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a [User] object.",
                md_links: {"User": "https://core.telegram.org/bots/api#user"}
            ),
            tg_doc: "https://core.telegram.org/bots/api#getme",
            tg_category: "Available methods",
            params: [],
        ),
        Method(
            names: ("sendMessage", "SendMessage", "send_message"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to send text messages. On success, the sent [Message] is returned.",
                md_links: {"Message": "https://core.telegram.org/bots/api#message"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#sendmessage",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "text",
                    ty: String,
                    descr: Doc(md: "Text of the message to be sent, 1-4096 characters after entities parsing")
                ),
                Param(
                    name: "parse_mode",
                    ty: Option(RawTy("ParseMode")),
                    descr: Doc(
                        md: "Mode for parsing entities in the message text. See [formatting options] for more details.",
                        md_links: {"formatting options": "https://core.telegram.org/bots/api#formatting-options"}
                    )
                ),
                Param(
                    name: "disable_web_page_preview",
                    ty: Option(bool),
                    descr: Doc(md: "Disables link previews for links in this message")
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"}
                    )
                ),
                Param(
                    name: "reply_to_message_id",
                    ty: Option(i64),
                    descr: Doc(md: "If the message is a reply, ID of the original message")
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
        ),
        Method(
            names: ("forwardMessage", "ForwardMessage", "forward_message"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to forward messages of any kind. On success, the sent [Message] is returned.",
                md_links: {"Message": "https://core.telegram.org/bots/api#message"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#forwardmessage",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"),
                ),
                Param(
                    name: "from_chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)"),
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"}
                    )
                ),
                Param(
                    name: "message_id",
                    ty: i64, 
                    descr: Doc(md: "Message identifier in the chat specified in _from\\_chat\\_id_")
                ),
            ],
        ),
        Method(
            names: ("sendPhoto", "SendPhoto", "send_photo"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to send photos. On success, the sent [Message] is returned.",
                md_links: {"Message": "https://core.telegram.org/bots/api#message"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#sendphoto",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "photo",
                    ty: RawTy("InputFile"),
                    descr: Doc(
                        md: "Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. [More info on Sending Files ¬ª]",
                        md_links: {"More info on Sending Files ¬ª": "https://core.telegram.org/bots/api#sending-files"},
                    )
                ),
                Param(
                    name: "caption",
                    ty: String,
                    descr: Doc(md: "Photo caption (may also be used when resending photos by _file\\_id_), 0-1024 characters after entities parsing")
                ),
                Param(
                    name: "parse_mode",
                    ty: Option(RawTy("ParseMode")),
                    descr: Doc(
                        md: "Mode for parsing entities in the photo caption. See [formatting options] for more details.",
                        md_links: {"formatting options": "https://core.telegram.org/bots/api#formatting-options"}
                    )
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"}
                    )
                ),
                Param(
                    name: "reply_to_message_id",
                    ty: Option(i64),
                    descr: Doc(md: "If the message is a reply, ID of the original message")
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
        ),
        Method(
            names: ("sendAudio", "SendAudio", "send_audio"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message] is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.\n\nFor sending voice messages, use the [sendVoice] method instead.",
                md_links: {
                    "Message": "https://core.telegram.org/bots/api#message",
                    "sendVoice": "https://core.telegram.org/bots/api#sendvoice",
                },
            ),
            tg_doc: "https://core.telegram.org/bots/api#sendaudio",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"),
                ),
                Param(
                    name: "audio",
                    ty: RawTy("InputFile"),
                    descr: Doc(
                        md: "Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files ¬ª]",
                        md_links: {"More info on Sending Files ¬ª": "https://core.telegram.org/bots/api#sending-files"},
                    ),
                ),
                Param(
                    name: "caption",
                    ty: String,
                    descr: Doc(md: "Audio caption, 0-1024 characters after entities parsing"),
                ),
                Param(
                    name: "parse_mode",
                    ty: Option(RawTy("ParseMode")),
                    descr: Doc(
                        md: "Mode for parsing entities in the audio caption. See [formatting options] for more details.",
                        md_links: {"formatting options": "https://core.telegram.org/bots/api#formatting-options"},
                    ),
                ),
                Param(
                    name: "duration",
                    ty: Option(u32),
                    descr: Doc(md: "Duration of the audio in seconds"),
                ),
                Param(
                    name: "performer",
                    ty: Option(String),
                    descr: Doc(md: "Performer"),
                ),
                Param(
                    name: "title",
                    ty: Option(String),
                    descr: Doc(md: "Track name"),
                ),
                Param(
                    name: "thumb",
                    ty: Option(RawTy("InputFile")),
                    descr: Doc(
                        md: "Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass ‚Äúattach://<file_attach_name>‚Äù if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. [More info on Sending Files ¬ª]",
                        md_links: {"More info on Sending Files ¬ª": "https://core.telegram.org/bots/api#sending-files"},
                    ),
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"},
                    )
                ),
                Param(
                    name: "reply_to_message_id",
                    ty: Option(i64),
                    descr: Doc(md: "If the message is a reply, ID of the original message")
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
        ),
        Method(
            names: ("sendDocument", "SendDocument", "send_document"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to send general files. On success, the sent [Message] is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.",
                md_links: { "Message": "https://core.telegram.org/bots/api#message" },
            ),
            tg_doc: "https://core.telegram.org/bots/api#senddocument",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"),
                ),
                Param(
                    name: "document",
                    ty: RawTy("InputFile"),
                    descr: Doc(
                        md: "File to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files ¬ª]",
                        md_links: {"More info on Sending Files ¬ª": "https://core.telegram.org/bots/api#sending-files"},
                    ),
                ),
                Param(
                    name: "thumb",
                    ty: Option(RawTy("InputFile")),
                    descr: Doc(
                        md: "Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass ‚Äúattach://<file_attach_name>‚Äù if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. [More info on Sending Files ¬ª]",
                        md_links: {"More info on Sending Files ¬ª": "https://core.telegram.org/bots/api#sending-files"},
                    ),
                ),
                Param(
                    name: "caption",
                    ty: String,
                    descr: Doc(md: "Document caption (may also be used when resending documents by _file\\_id_), 0-1024 characters after entities parsing"),
                ),
                Param(
                    name: "parse_mode",
                    ty: Option(RawTy("ParseMode")),
                    descr: Doc(
                        md: "Mode for parsing entities in the audio caption. See [formatting options] for more details.",
                        md_links: {"formatting options": "https://core.telegram.org/bots/api#formatting-options"},
                    ),
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"},
                    )
                ),
                Param(
                    name: "reply_to_message_id",
                    ty: Option(i64),
                    descr: Doc(md: "If the message is a reply, ID of the original message")
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
        ),
        Method(
            names: ("sendVideo", "SendVideo", "send_video"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as [Document]). On success, the sent [Message] is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.",
                md_links: {
                    "Document": "https://core.telegram.org/bots/api#document",
                    "Message": "https://core.telegram.org/bots/api#message",
                },
            ),
            tg_doc: "https://core.telegram.org/bots/api#sendvideo",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"),
                ),
                Param(
                    name: "video",
                    ty: RawTy("InputFile"),
                    descr: Doc(
                        md: "Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. [More info on Sending Files ¬ª]",
                        md_links: {"More info on Sending Files ¬ª": "https://core.telegram.org/bots/api#sending-files"},
                    ),
                ),
                Param(
                    name: "duration",
                    ty: Option(u32),
                    descr: Doc(md: "Duration of the video in seconds"),
                ),
                Param(
                    name: "width",
                    ty: Option(u32),
                    descr: Doc(md: "Video width"),
                ),
                Param(
                    name: "height",
                    ty: Option(u32),
                    descr: Doc(md: "Video height"),
                ),
                Param(
                    name: "thumb",
                    ty: Option(RawTy("InputFile")),
                    descr: Doc(
                        md: "Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass ‚Äúattach://<file_attach_name>‚Äù if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. [More info on Sending Files ¬ª]",
                        md_links: {"More info on Sending Files ¬ª": "https://core.telegram.org/bots/api#sending-files"},
                    ),
                ),
                Param(
                    name: "caption",
                    ty: String,
                    descr: Doc(md: "Video caption (may also be used when resending videos by _file\\_id_), 0-1024 characters after entities parsing"),
                ),
                Param(
                    name: "parse_mode",
                    ty: Option(RawTy("ParseMode")),
                    descr: Doc(
                        md: "Mode for parsing entities in the video caption. See [formatting options] for more details.",
                        md_links: {"formatting options": "https://core.telegram.org/bots/api#formatting-options"},
                    ),
                ),
                Param(
                    name: "supports_streaming",
                    ty: Option(bool),
                    descr: Doc(md: "Pass _True_, if the uploaded video is suitable for streaming"),
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"},
                    )
                ),
                Param(
                    name: "reply_to_message_id",
                    ty: Option(i64),
                    descr: Doc(md: "If the message is a reply, ID of the original message")
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
        ),
        Method(
            names: ("sendAnimation", "SendAnimation", "send_animation"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message] is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.",
                md_links: { "Message": "https://core.telegram.org/bots/api#message" },
            ),
            tg_doc: "https://core.telegram.org/bots/api#sendanimation",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"),
                ),
                Param(
                    name: "animation",
                    ty: RawTy("InputFile"),
                    descr: Doc(
                        md: "Animation to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. [More info on Sending Files ¬ª]",
                        md_links: {"More info on Sending Files ¬ª": "https://core.telegram.org/bots/api#sending-files"},
                    ),
                ),
                Param(
                    name: "duration",
                    ty: Option(u32),
                    descr: Doc(md: "Duration of the animation in seconds"),
                ),
                Param(
                    name: "width",
                    ty: Option(u32),
                    descr: Doc(md: "Animation width"),
                ),
                Param(
                    name: "height",
                    ty: Option(u32),
                    descr: Doc(md: "Animation height"),
                ),
                Param(
                    name: "thumb",
                    ty: Option(RawTy("InputFile")),
                    descr: Doc(
                        md: "Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass ‚Äúattach://<file_attach_name>‚Äù if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. [More info on Sending Files ¬ª]",
                        md_links: {"More info on Sending Files ¬ª": "https://core.telegram.org/bots/api#sending-files"},
                    ),
                ),
                Param(
                    name: "caption",
                    ty: String,
                    descr: Doc(md: "Animation caption (may also be used when resending videos by _file\\_id_), 0-1024 characters after entities parsing"),
                ),
                Param(
                    name: "parse_mode",
                    ty: Option(RawTy("ParseMode")),
                    descr: Doc(
                        md: "Mode for parsing entities in the animation caption. See [formatting options] for more details.",
                        md_links: {"formatting options": "https://core.telegram.org/bots/api#formatting-options"},
                    ),
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"},
                    )
                ),
                Param(
                    name: "reply_to_message_id",
                    ty: Option(i64),
                    descr: Doc(md: "If the message is a reply, ID of the original message")
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
        ),
        Method(
            names: ("sendVoice", "SendVoice", "send_voice"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as [Audio] or [Document]). On success, the sent [Message] is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.",
                md_links: {
                    "Audio": "https://core.telegram.org/bots/api#audio",
                    "Document": "https://core.telegram.org/bots/api#document",
                    "Message": "https://core.telegram.org/bots/api#message",
                },
            ),
            tg_doc: "https://core.telegram.org/bots/api#sendaudio",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"),
                ),
                Param(
                    name: "voice",
                    ty: RawTy("InputFile"),
                    descr: Doc(
                        md: "Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files ¬ª]",
                        md_links: {"More info on Sending Files ¬ª": "https://core.telegram.org/bots/api#sending-files"},
                    ),
                ),
                Param(
                    name: "caption",
                    ty: String,
                    descr: Doc(md: "Voice message caption, 0-1024 characters after entities parsing"),
                ),
                Param(
                    name: "parse_mode",
                    ty: Option(RawTy("ParseMode")),
                    descr: Doc(
                        md: "Mode for parsing entities in the voice message caption. See [formatting options] for more details.",
                        md_links: {"formatting options": "https://core.telegram.org/bots/api#formatting-options"},
                    ),
                ),
                Param(
                    name: "duration",
                    ty: Option(u32),
                    descr: Doc(md: "Duration of the voice message in seconds"),
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"},
                    )
                ),
                Param(
                    name: "reply_to_message_id",
                    ty: Option(i64),
                    descr: Doc(md: "If the message is a reply, ID of the original message")
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
        ),
        Method(
            names: ("sendVideoNote", "SendVideoNote", "send_video_note"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "As of [v.4.0], Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message] is returned.",
                md_links: {
                    "v.4.0": "https://core.telegram.org/bots/api#document",
                    "Message": "https://core.telegram.org/bots/api#message",
                },
            ),
            tg_doc: "https://core.telegram.org/bots/api#sendvideonote",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"),
                ),
                Param(
                    name: "video_note",
                    ty: RawTy("InputFile"),
                    descr: Doc(
                        md: "Video note to send. Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. [More info on Sending Files ¬ª]. Sending video notes by a URL is currently unsupported",
                        md_links: {"More info on Sending Files ¬ª": "https://core.telegram.org/bots/api#sending-files"},
                    ),
                ),
                Param(
                    name: "duration",
                    ty: Option(u32),
                    descr: Doc(md: "Duration of the video in seconds"),
                ),
                Param(
                    name: "length",
                    ty: Option(u32),
                    descr: Doc(md: "Video width and height, i.e. diameter of the video message"),
                ),
                Param(
                    name: "thumb",
                    ty: Option(RawTy("InputFile")),
                    descr: Doc(
                        md: "Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass ‚Äúattach://<file_attach_name>‚Äù if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. [More info on Sending Files ¬ª]",
                        md_links: {"More info on Sending Files ¬ª": "https://core.telegram.org/bots/api#sending-files"},
                    ),
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"},
                    )
                ),
                Param(
                    name: "reply_to_message_id",
                    ty: Option(i64),
                    descr: Doc(md: "If the message is a reply, ID of the original message")
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
        ),
        Method(
            names: ("sendMediaGroup", "SendMediaGroup", "send_media_group"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to send a group of photos or videos as an album. On success, an array of the sent [Messages] is returned.",
                md_links: {"Message": "https://core.telegram.org/bots/api#message"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#sendmediagroup",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "media",
                    ty: ArrayOf(RawTy("InputMedia")), // TODO: InputMediaPhoto | InputMediaVideo
                    descr: Doc(md: "A JSON-serialized array describing photos and videos to be sent, must include 2-10 items")
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"}
                    )
                ),
                Param(
                    name: "reply_to_message_id",
                    ty: Option(i64),
                    descr: Doc(md: "If the message is a reply, ID of the original message")
                ),
            ],
        ),
        Method(
            names: ("sendLocation", "SendLocation", "send_location"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to send point on the map. On success, the sent [Message] is returned.",
                md_links: {"Message": "https://core.telegram.org/bots/api#message"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#sendlocation",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"),
                ),
                Param(
                    name: "latitude",
                    ty: f64,
                    descr: Doc(md: "Latitude of the location"),
                ),
                Param(
                    name: "longitude",
                    ty: f64,
                    descr: Doc(md: "Longitude of the location"),
                ),
                Param(
                    name: "live_period",
                    ty: u32,
                    descr: Doc(
                        md: "Period in seconds for which the location will be updated (see [Live Locations], should be between 60 and 86400.",
                        md_links: {"Live Locations": "https://telegram.org/blog/live-locations"}
                    )
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"}
                    )
                ),
                Param(
                    name: "reply_to_message_id",
                    ty: Option(i64),
                    descr: Doc(md: "If the message is a reply, ID of the original message")
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
        ),
        Method(
            names: ("editMessageLiveLocation", "EditMessageLiveLocation", "edit_message_live_location"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to [stopMessageLiveLocation]. On success, the edited Message is returned.",
                md_links: {"stopMessageLiveLocation": "https://core.telegram.org/bots/api#stopmessagelivelocation"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#editmessagelivelocation",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "message_id",
                    ty: i64, 
                    descr: Doc(md: "Identifier of the message to edit")
                ),
                Param(
                    name: "latitude",
                    ty: f64,
                    descr: Doc(md: "Latitude of new location"),
                ),
                Param(
                    name: "longitude",
                    ty: f64,
                    descr: Doc(md: "Longitude of new location"),
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
            sibling: Some("editMessageLiveLocationInline"),
        ),
        Method(
            names: ("editMessageLiveLocationInline", "EditMessageLiveLocationInline", "edit_message_live_location_inline"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to [stopMessageLiveLocation]. On success, True is returned.",
                md_links: {"stopMessageLiveLocation": "https://core.telegram.org/bots/api#stopmessagelivelocation"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#editmessagelivelocation",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "inline_message_id",
                    ty: String,
                    descr: Doc(md: "Identifier of the inline message"),
                ),
                Param(
                    name: "latitude",
                    ty: f64,
                    descr: Doc(md: "Latitude of new location"),
                ),
                Param(
                    name: "longitude",
                    ty: f64,
                    descr: Doc(md: "Longitude of new location"),
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
            sibling: Some("editMessageLiveLocation"),
        ),
        Method(
            names: ("stopMessageLiveLocation", "StopMessageLiveLocation", "stop_message_live_location"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to [stopMessageLiveLocation]. On success, the edited Message is returned.",
                md_links: {
                    "Message": "https://core.telegram.org/bots/api#message",
                    "stopMessageLiveLocation": "https://core.telegram.org/bots/api#stopmessagelivelocation",
                },
            ),
            tg_doc: "https://core.telegram.org/bots/api#editmessagelivelocation",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "message_id",
                    ty: i64, 
                    descr: Doc(md: "Identifier of the message to edit")
                ),
                Param(
                    name: "latitude",
                    ty: f64,
                    descr: Doc(md: "Latitude of new location"),
                ),
                Param(
                    name: "longitude",
                    ty: f64,
                    descr: Doc(md: "Longitude of new location"),
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
            sibling: Some("stopMessageLiveLocationInline"),
        ),
        Method(
            names: ("stopMessageLiveLocationInline", "StopMessageLiveLocationInline", "stop_message_live_location_inline"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to [stopMessageLiveLocation]. On success, True is returned.",
                md_links: {"stopMessageLiveLocation": "https://core.telegram.org/bots/api#stopmessagelivelocation"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#editmessagelivelocation",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "inline_message_id",
                    ty: String,
                    descr: Doc(md: "Identifier of the inline message"),
                ),
                Param(
                    name: "latitude",
                    ty: f64,
                    descr: Doc(md: "Latitude of new location"),
                ),
                Param(
                    name: "longitude",
                    ty: f64,
                    descr: Doc(md: "Longitude of new location"),
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
            sibling: Some("stopMessageLiveLocation"),
        ),
        Method(
            names: ("sendVenue", "SendVenue", "send_venue"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to send information about a venue. On success, the sent [Message] is returned.",
                md_links: {"Message": "https://core.telegram.org/bots/api#message"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#sendvenue",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "latitude",
                    ty: f64,
                    descr: Doc(md: "Latitude of new location"),
                ),
                Param(
                    name: "longitude",
                    ty: f64,
                    descr: Doc(md: "Longitude of new location"),
                ),
                Param(
                    name: "title",
                    ty: String,
                    descr: Doc(md: "Name of the venue")
                ),
                Param(
                    name: "address",
                    ty: String,
                    descr: Doc(md: "Address of the venue")
                ),
                Param(
                    name: "foursquare_id",
                    ty: Option(String),
                    descr: Doc(md: "Foursquare identifier of the venue")
                ),
                Param(
                    name: "foursquare_type",
                    ty: Option(String),
                    descr: Doc(md: "Foursquare type of the venue, if known. (For example, ‚Äúarts_entertainment/default‚Äù, ‚Äúarts_entertainment/aquarium‚Äù or ‚Äúfood/icecream‚Äù.)")
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"}
                    )
                ),
                Param(
                    name: "reply_to_message_id",
                    ty: Option(i64),
                    descr: Doc(md: "If the message is a reply, ID of the original message")
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
        ),
        Method(
            names: ("sendContact", "SendContact", "send_contact"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to send phone contacts. On success, the sent [Message] is returned.",
                md_links: {"Message": "https://core.telegram.org/bots/api#message"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#sendcontact",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "phone_number",
                    ty: f64,
                    descr: Doc(md: "Contact's phone number"),
                ),
                Param(
                    name: "first_name",
                    ty: f64,
                    descr: Doc(md: "Contact's first name"),
                ),
                Param(
                    name: "last_name",
                    ty: Option(String),
                    descr: Doc(md: "Contact's last name")
                ),
                Param(
                    name: "vcard",
                    ty: Option(String),
                    descr: Doc(
                        md: "Additional data about the contact in the form of a [vCard], 0-2048 bytes",
                        md_links: {"vCard": "https://en.wikipedia.org/wiki/VCard"}
                    )
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"}
                    )
                ),
                Param(
                    name: "reply_to_message_id",
                    ty: Option(i64),
                    descr: Doc(md: "If the message is a reply, ID of the original message")
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
        ),
        Method(
            names: ("sendPoll", "SendPoll", "send_poll"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to send phone contacts. On success, the sent [Message] is returned.",
                md_links: {"Message": "https://core.telegram.org/bots/api#message"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#sendpoll",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "question",
                    ty: f64,
                    descr: Doc(md: "Poll question, 1-255 characters"),
                ),
                Param(
                    name: "options",
                    ty: ArrayOf(String),
                    descr: Doc(md: "A JSON-serialized list of answer options, 2-10 strings 1-100 characters each"),
                ),
                Param(
                    name: "is_anonymous",
                    ty: Option(bool),
                    descr: Doc(md: "True, if the poll needs to be anonymous, defaults to True")
                ),
                Param(
                    name: "type",
                    ty: RawTy("PollType"),
                    descr: Doc(md: "Poll type, ‚Äúquiz‚Äù or ‚Äúregular‚Äù, defaults to ‚Äúregular‚Äù")
                ),
                Param(
                    name: "allows_multiple_answers",
                    ty: Option(bool),
                    descr: Doc(md: "True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to False")
                ),
                Param(
                    name: "correct_option_id",
                    ty: Option(u8),
                    descr: Doc(md: "0-based identifier of the correct answer option, required for polls in quiz mode")
                ),
                Param(
                    name: "explanation",
                    ty: Option(String),
                    descr: Doc(md: "Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing")
                ),
                Param(
                    name: "explanation_parse_mode",
                    ty: Option(RawTy("ParseMode")),
                    descr: Doc(
                        md: "Mode for parsing entities in the message text. See [formatting options] for more details.",
                        md_links: {"formatting options": "https://core.telegram.org/bots/api#formatting-options"}
                    )
                ),
                Param(
                    name: "open_period",
                    ty: Option(u16),
                    descr: Doc(md: "Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close_date.")
                ),
                Param(
                    name: "open_period",
                    ty: Option(u64),
                    descr: Doc(md: "Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with open_period.")
                ),
                Param(
                    name: "is_closed",
                    ty: Option(bool),
                    descr: Doc(md: "Pass True, if the poll needs to be immediately closed. This can be useful for poll preview.")
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"}
                    )
                ),
                Param(
                    name: "reply_to_message_id",
                    ty: Option(i64),
                    descr: Doc(md: "If the message is a reply, ID of the original message")
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
        ),
        Method(
            names: ("sendDice", "SendDice", "send_dice"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method to send an animated emoji that will display a random value. On success, the sent [Message] is returned.",
                md_links: {"Message": "https://core.telegram.org/bots/api#message"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#senddice",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "emoji",
                    ty: RawTy("DiceEmoji"),
                    descr: Doc(md: "Emoji on which the dice throw animation is based. Currently, must be one of ‚Äúüé≤‚Äù, ‚ÄúüéØ‚Äù, or ‚ÄúüèÄ‚Äù. Dice can have values 1-6 for ‚Äúüé≤‚Äù and ‚ÄúüéØ‚Äù, and values 1-5 for ‚ÄúüèÄ‚Äù. Defaults to ‚Äúüé≤‚Äù"),
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(
                        md: "Sends the message [silently]. Users will receive a notification with no sound.",
                        md_links: {"silently": "https://telegram.org/blog/channels-2-0#silent-messages"}
                    )
                ),
                Param(
                    name: "reply_to_message_id",
                    ty: Option(i64),
                    descr: Doc(md: "If the message is a reply, ID of the original message")
                ),
                Param(
                    name: "reply_markup",
                    ty: Option(RawTy("ReplyMarkup")),
                    descr: Doc(md: "Additional interface options. A JSON-serialized object for an [inline keyboard], [custom reply keyboard], instructions to remove reply keyboard or to force a reply from the user."),
                    md_links: {
                        "inline keyboard": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                        "custom reply keyboard": "https://core.telegram.org/bots#keyboards",
                    }
                ),
            ],
        ),
        Method(
            names: ("sendChatAction", "SendChatAction", "send_chat_action"),
            return_ty: RawTy("Message"),
            doc: Doc(
                md: "Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success.\n\n> Example: The [ImageBot] needs some time to process a request and upload the image. Instead of sending a text message along the lines of ‚ÄúRetrieving image, please wait‚Ä¶‚Äù, the bot may use sendChatAction with action = upload_photo. The user will see a ‚Äúsending photo‚Äù status for the bot.\n\nWe only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.",
                md_links: {"ImageBot": "https://t.me/imagebot"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#sendchataction",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "action",
                    ty: RawTy("ChatAction"),
                    descr: Doc(
                        md: "Type of action to broadcast. Choose one, depending on what the user is about to receive: typing for [text messages], upload_photo for [photos], record_video or upload_video for [videos], record_audio or upload_audio for [audio files], upload_document for [general files], find_location for [location data], record_video_note or upload_video_note for [video notes].",
                        md_links: {
                            "text messages": "https://core.telegram.org/bots/api#sendmessage",
                            "photos": "https://core.telegram.org/bots/api#sendphoto",
                            "videos": "https://core.telegram.org/bots/api#sendvideo",
                            "audio files": "https://core.telegram.org/bots/api#sendaudio",
                            "general files": "https://core.telegram.org/bots/api#senddocument",
                            "location data": "https://core.telegram.org/bots/api#sendlocation",
                            "video notes": "https://core.telegram.org/bots/api#sendvideonote",
                        }
                    ),
                ),
            ],
        ),
        Method(
            names: ("getUserProfilePhotos", "GetUserProfilePhotos", "get_user_profile_photos"),
            return_ty: RawTy("UserProfilePhotos"),
            doc: Doc(
                md: "Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos] object.",
                md_links: {"UserProfilePhotos": "https://core.telegram.org/bots/api#userprofilephotos"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#getuserprofilephotos",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "user_id",
                    ty: u32,
                    descr: Doc(md: "Unique identifier of the target user")
                ),
                Param(
                    name: "offset",
                    ty: Option(u32),
                    descr: Doc(md: "Sequential number of the first photo to be returned. By default, all photos are returned.")
                ),
                Param(
                    name: "limit",
                    ty: Option(u8),
                    descr: Doc(md: "Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.")
                ),
            ],
        ),
        Method(
            names: ("getFile", "GetFile", "get_file"),
            return_ty: RawTy("File"),
            doc: Doc(
                md: "Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File] object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile] again.",
                md_links: {
                    "File": "https://core.telegram.org/bots/api#file",
                    "getFile": "https://core.telegram.org/bots/api#getfile",
                },
            ),
            tg_doc: "https://core.telegram.org/bots/api#getuserprofilephotos",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "file_id",
                    ty: String,
                    descr: Doc(md: "File identifier to get info about")
                ),
            ],
        ),
        Method(
            names: ("kickChatMember", "KickChatMember", "kick_chat_member"),
            return_ty: True,
            doc: Doc(
                md: "Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless [unbanned] first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns _True_ on success.",
                md_links: {"unbanned": "https://core.telegram.org/bots/api#unbanchatmember"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#kickchatmember",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "user_id",
                    ty: u32,
                    descr: Doc(md: "Unique identifier of the target user")
                ),
                Param(
                    name: "until_date",
                    ty: Option(u64),
                    descr: Doc(md: "Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever")
                ),
            ],
        ),
        Method(
            names: ("unbanChatMember", "UnbanChatMember", "unban_chat_member"),
            return_ty: True,
            doc: Doc(md: "Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. Returns _True_ on success."),
            tg_doc: "https://core.telegram.org/bots/api#unbanchatmember",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "user_id",
                    ty: u32,
                    descr: Doc(md: "Unique identifier of the target user")
                ),
            ],
        ),
        Method(
            names: ("restrictChatMember", "RestrictChatMember", "restrict_chat_member"),
            return_ty: True,
            doc: Doc(md: "Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass _True_ for all permissions to lift restrictions from a user. Returns _True_ on success."),
            tg_doc: "https://core.telegram.org/bots/api#restrictchatmember",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "user_id",
                    ty: u32,
                    descr: Doc(md: "Unique identifier of the target user")
                ),
                Param(
                    name: "permissions",
                    ty: RawTy("ChatPermissions"),
                    descr: Doc(md: "A JSON-serialized object for new user permissions")
                ),
                Param(
                    name: "until_date",
                    ty: Option(u64),
                    descr: Doc(md: "Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever")
                ),
            ],
        ),
        Method(
            names: ("promoteChatMember", "PromoteChatMember", "promote_chat_member"),
            return_ty: True,
            doc: Doc(md: "Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass _False_ for all boolean parameters to demote a user. Returns _True_ on success."),
            tg_doc: "https://core.telegram.org/bots/api#promotechatmember",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "user_id",
                    ty: u32,
                    descr: Doc(md: "Unique identifier of the target user")
                ),
                Param(
                    name: "can_change_info",
                    ty: Option(bool),
                    descr: Doc(md: "Pass True, if the administrator can change chat title, photo and other settings")
                ),
                Param(
                    name: "can_post_messages",
                    ty: Option(bool),
                    descr: Doc(md: "Pass True, if the administrator can create channel posts, channels only")
                ),
                Param(
                    name: "can_edit_messages",
                    ty: Option(bool),
                    descr: Doc(md: "Pass True, if the administrator can edit messages of other users and can pin messages, channels only")
                ),
                Param(
                    name: "can_delete_messages",
                    ty: Option(bool),
                    descr: Doc(md: "Pass True, if the administrator can delete messages of other users")
                ),
                Param(
                    name: "can_invite_users",
                    ty: Option(bool),
                    descr: Doc(md: "Pass True, if the administrator can invite new users to the chat")
                ),
                Param(
                    name: "can_restrict_members",
                    ty: Option(bool),
                    descr: Doc(md: "Pass True, if the administrator can restrict, ban or unban chat members")
                ),
                 Param(
                    name: "can_pin_messages",
                    ty: Option(bool),
                    descr: Doc(md: "Pass True, if the administrator can pin messages, supergroups only")
                ),
                Param(
                    name: "can_promote_members",
                    ty: Option(bool),
                    descr: Doc(md: "Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)")
                ),
            ],
        ),
        Method(
            names: ("setChatAdministratorCustomTitle", "SetChatAdministratorCustomTitle", "set_chat_administrator_custom_title"),
            return_ty: True,
            doc: Doc(md: "Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns _True_on success."),
            tg_doc: "https://core.telegram.org/bots/api#setchatadministratorcustomtitle",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "user_id",
                    ty: u32,
                    descr: Doc(md: "Unique identifier of the target user")
                ),
                Param(
                    name: "custom_title",
                    ty: String,
                    descr: Doc(md: "New custom title for the administrator; 0-16 characters, emoji are not allowed")
                ),
            ],
        ),
        Method(
            names: ("setChatPermissions", "SetChatPermissions", "set_chat_permissions"),
            return_ty: True,
            doc: Doc(md: "Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the _can_restrict_members_ admin rights. Returns _True_ on success."),
            tg_doc: "https://core.telegram.org/bots/api#setchatpermissions",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "permissions",
                    ty: RawTy("ChatPermissions"),
                    descr: Doc(md: "New default chat permissions")
                ),
            ],
        ),
        Method(
            names: ("exportChatInviteLink", "ExportChatInviteLink", "export_chat_invite_link"),
            return_ty: String,
            doc: Doc(md: "Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as String on success.\n\n> Note: Each administrator in a chat generates their own invite links. Bots can't use invite links generated by other administrators. If you want your bot to work with invite links, it will need to generate its own link using exportChatInviteLink ‚Äî after this the link will become available to the bot via the getChat method. If your bot needs to generate a new invite link replacing its previous one, use exportChatInviteLink again."),
            tg_doc: "https://core.telegram.org/bots/api#exportchatinvitelink",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
            ],
        ),
        Method(
            names: ("setChatPhoto", "SetChatPhoto", "set_chat_photo"),
            return_ty: String,
            doc: Doc(md: "Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns _True_ on success."),
            tg_doc: "https://core.telegram.org/bots/api#setchatphoto",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "photo",
                    ty: RawTy("InputFile"),
                    descr: Doc(md: "New chat photo, uploaded using multipart/form-data")
                ),
            ],
        ),
        Method(
            names: ("deleteChatPhoto", "DeleteChatPhoto", "delete_chat_photo"),
            return_ty: String,
            doc: Doc(md: "Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success."),
            tg_doc: "https://core.telegram.org/bots/api#deletechatphoto",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
            ],
        ),
        Method(
            names: ("setChatTitle", "SetChatTitle", "set_chat_title"),
            return_ty: String,
            doc: Doc(md: "Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns _True_ on success."),
            tg_doc: "https://core.telegram.org/bots/api#setchattitle",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "title",
                    ty: String,
                    descr: Doc(md: "New chat title, 1-255 characters")
                ),
            ],
        ),
        Method(
            names: ("setChatDescription", "SetChatDescription", "set_chat_description"),
            return_ty: String,
            doc: Doc(md: "Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns _True_ on success."),
            tg_doc: "https://core.telegram.org/bots/api#setchatdescription",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "description",
                    ty: Option(String),
                    descr: Doc(md: "New chat description, 0-255 characters")
                ),
            ],
        ),
        Method(
            names: ("pinChatMessage", "PinChatMessage", "pin_chat_message"),
            return_ty: String,
            doc: Doc(md: "Use this method to pin a message in a group, a supergroup, or a channel. The bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' admin right in the supergroup or 'can_edit_messages' admin right in the channel. Returns _True_ on success."),
            tg_doc: "https://core.telegram.org/bots/api#pinchatmessage",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "message_id",
                    ty: i64,
                    descr: Doc(md: "Identifier of a message to pin"),
                ),
                Param(
                    name: "disable_notification",
                    ty: Option(bool), 
                    descr: Doc(md: "Pass True, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels.")
                ),
            ],
        ),
        Method(
            names: ("unpinChatMessage", "UnpinChatMessage", "unpin_chat_message"),
            return_ty: String,
            doc: Doc(md: "Use this method to unpin a message in a group, a supergroup, or a channel. The bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' admin right in the supergroup or 'can_edit_messages' admin right in the channel. Returns _True_ on success."),
            tg_doc: "https://core.telegram.org/bots/api#unpinchatmessage",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
            ],
        ),
        Method(
            names: ("leaveChat", "LeaveChat", "leave_chat"),
            return_ty: String,
            doc: Doc(md: "Use this method for your bot to leave a group, supergroup or channel. Returns _True_ on success."),
            tg_doc: "https://core.telegram.org/bots/api#leavechat",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
            ],
        ),
        Method(
            names: ("getChat", "GetChat", "get_chat"),
            return_ty: RawTy("Chat"),
            doc: Doc(
                md: "Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat] object on success.",
                md_links: {"Chat": "https://core.telegram.org/bots/api#chat"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#getchat",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
            ],
        ),
        Method(
            names: ("getChatAdministrators", "GetChatAdministrators", "get_chat_administrators"),
            return_ty: RawTy("ChatMember"),
            doc: Doc(
                md: "Use this method to get a list of administrators in a chat. On success, returns an Array of [ChatMember] objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.",
                md_links: {"ChatMember": "https://core.telegram.org/bots/api#chatmember"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#getchatadministrators",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
            ],
        ),
        Method(
            names: ("getChatMembersCount", "GetChatMembersCount", "get_chat_members_count"),
            return_ty: u32,
            doc: Doc(md: "Use this method to get the number of members in a chat. Returns _Int_ on success."),
            tg_doc: "https://core.telegram.org/bots/api#getchatmemberscount",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
            ],
        ),
        Method(
            names: ("getChatMember", "GetChatMember", "get_chat_member"),
            return_ty: u32,
            doc: Doc(
                md: "Use this method to get information about a member of a chat. Returns a [ChatMember] object on success.",
                md_links: {"ChatMember": "https://core.telegram.org/bots/api#chatmember"}
            ),
            tg_doc: "https://core.telegram.org/bots/api#getchatmember",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "user_id",
                    ty: u32,
                    descr: Doc(md: "Unique identifier of the target user")
                ),
            ],
        ),
        Method(
            names: ("setChatStickerSet", "SetChatStickerSet", "set_chat_sticker_set"),
            return_ty: u32,
            doc: Doc(md: "Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field _can\\_set\\_sticker\\_set_ optionally returned in getChat requests to check if the bot can use this method. Returns _True_ on success."),
            tg_doc: "https://core.telegram.org/bots/api#set_chat_sticker_set",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
                Param(
                    name: "sticker_set_name",
                    ty: String,
                    descr: Doc(md: "Name of the sticker set to be set as the group sticker set")
                ),
            ],
        ),
        Method(
            names: ("deleteChatStickerSet", "DeleteChatStickerSet", "delete_chat_sticker_set"),
            return_ty: u32,
            doc: Doc(
                md: "Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field `can_set_sticker_set` optionally returned in [getChat] requests to check if the bot can use this method. Returns _True_ on success.",
                md_links: {"getChat": "https://core.telegram.org/bots/api#getchat"}
            ),
            tg_doc: "https://core.telegram.org/bots/api#deletechatstickerset",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "chat_id",
                    ty: RawTy("ChatId"),
                    descr: Doc(md: "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)")
                ),
            ],
        ),
        Method(
            names: ("answerCallbackQuery", "AnswerCallbackQuery", "answer_callback_query"),
            return_ty: True,
            doc: Doc(
                md: "Use this method to send answers to callback queries sent from [inline keyboards]. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.\n\n>Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@Botfather] and accept the terms. Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.",
                md_links: {
                    "inline keyboards": "https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",
                    "@Botfather": "https://t.me/botfather",
                }
            ),
            tg_doc: "https://core.telegram.org/bots/api#answercallbackquery",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "callback_query_id",
                    ty: String,
                    descr: Doc(md: "Unique identifier for the query to be answered"),
                ),
                Param(
                    name: "text",
                    ty: Option(String),
                    descr: Doc(md: "Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters"),
                ),
                Param(
                    name: "show_alert",
                    ty: Option(bool),
                    descr: Doc(md: "If true, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to false."),
                ),
                Param(
                    name: "url",
                    ty: Option(String),
                    descr: Doc(
                        md: "URL that will be opened by the user's client. If you have created a [Game] and accepted the conditions via [@Botfather], specify the URL that opens your game ‚Äî note that this will only work if the query comes from a _[callback\\_game]_ button.\n\nOtherwise, you may use links like `t.me/your\\_bot?start=XXXX` that open your bot with a parameter.",
                        md_links: {
                            "Game": "https://core.telegram.org/bots/api#game",
                            "@Botfather": "https://t.me/botfather",
                            "callback_game": "https://core.telegram.org/bots/api#inlinekeyboardbutton",
                        },
                    ),
                ),
                Param(
                    name: "cache_time",
                    ty: Option(u32),
                    descr: Doc(md: "The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0."),
                ),
            ],
        ),
        Method(
            names: ("setMyCommands", "SetMyCommands", "set_my_commands"),
            return_ty: u32,
            doc: Doc(md: "Use this method to change the list of the bot's commands. Returns _True_ on success."),
            tg_doc: "https://core.telegram.org/bots/api#setmycommands",
            tg_category: "Available methods",
            params: [
                Param(
                    name: "commands",
                    ty: ArrayOf(RawTy("BotCommand")),
                    descr: Doc(md: "A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.")
                ),
            ],
        ),
        Method(
            names: ("getMyCommands", "GetMyCommands", "get_my_commands"),
            return_ty: u32,
            doc: Doc(
                md: "Use this method to get the current list of the bot's commands. Requires no parameters. Returns Array of [BotCommand] on success.",
                md_links: {"BotCommand": "https://core.telegram.org/bots/api#botcommand"},
            ),
            tg_doc: "https://core.telegram.org/bots/api#getmycommands",
            tg_category: "Available methods",
            params: [],
        ),
    ],
    tg_categoryes: {
        "Getting updates": "https://core.telegram.org/bots/api#getting-updates",
        "Available methods": "https://core.telegram.org/bots/api#available-methods",
    }
)
